<UserControl x:Class="SpotifySongTagger.Views.TagEditor"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:backend="clr-namespace:Backend.Entities;assembly=Backend"
             xmlns:viewmodels="clr-namespace:SpotifySongTagger.ViewModels"
             xmlns:validationRules="clr-namespace:SpotifySongTagger.ValidationRules" 
             xmlns:converters="clr-namespace:SpotifySongTagger.Converters"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             d:DataContext="{d:DesignInstance viewmodels:TagEditorViewModel}"
             Loaded="UserControl_Loaded"
             Unloaded="UserControl_Unloaded"
             Name="TagEditorUserControl">

    <materialDesign:DialogHost DialogTheme="Inherit">
        <Grid>
            <Grid.Resources>
                <converters:VolumeToIconKindConverter x:Key="VolumeToIconKindConverter"/>
                <converters:DoubleToTextConverter x:Key="VolumeToTextConverter" Format="N0" Suffix="%"/>
                <converters:MsToMinConverter x:Key="MsToMinConverter"/>
                <converters:BooleanToStringConverter x:Key="IsPremiumPlayToolTipConverter" TrueValue="Play" FalseValue="Requires Spotify Premium"/>
                <converters:BooleanToStringConverter x:Key="IsPremiumPauseToolTipConverter" TrueValue="Pause" FalseValue="Requires Spotify Premium"/>
                <converters:BooleanToStringConverter x:Key="IsPremiumEmptyToolTipConverter" FalseValue="Requires Spotify Premium"/>
                <sys:Double x:Key="SpotifyControlSize">24</sys:Double>
                <sys:Double x:Key="SpotifyPlayPauseSize">36</sys:Double>
                <converters:ObjectToTypeNameConverter x:Key="ObjectToTypeNameConverter"/>
                <materialDesign:NullableToVisibilityConverter x:Key="InverseNullableToVisibilityConverter" NullValue="Visible" NotNullValue="Collapsed"/>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="3*"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!-- playlists -->
            <TreeView 
                Grid.Row="0" 
                ItemsSource="{Binding PlaylistCategories}"
                SelectedItemChanged="Playlists_SelectionChanged" 
                Visibility="{Binding LoadedPlaylists, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TreeView.Resources>
                    <Style TargetType="TreeViewItem" BasedOn="{StaticResource MaterialDesignTreeViewItem}">
                        <Style.Triggers>
                            <!-- expand PlaylistCategories -->
                            <DataTrigger Binding="{Binding Converter={StaticResource ObjectToTypeNameConverter}}" Value="PlaylistCategory">
                                <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:PlaylistCategory}" ItemsSource="{Binding Playlists}">
                        <TextBlock Text="{Binding Name}" Margin="3,2" />
                    </HierarchicalDataTemplate>
                    <DataTemplate DataType="{x:Type backend:Playlist}">
                        <TextBlock Text="{Binding Name}" Margin="3 2" />
                    </DataTemplate>
                </TreeView.Resources>
            </TreeView>
            <ProgressBar 
                Grid.Column="0" 
                Visibility="{Binding LoadedPlaylists, Converter={StaticResource InverseBoolToVisConverter}}"
                Style="{StaticResource MaterialDesignCircularProgressBar}"
                Value="0"
                IsIndeterminate="True" />
            
            <GridSplitter Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="1" />
            
            <!-- instructions -->
            <StackPanel 
                Grid.Column="1" 
                HorizontalAlignment="Center" VerticalAlignment="Center" 
                Visibility="{Binding SelectedPlaylist, Converter={StaticResource InverseNullableToVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" Margin="10">
                    <TextBlock Text="1. Sync your Spotify library with" VerticalAlignment="Center" Margin="0 0 5 0" Style="{StaticResource MaterialDesignHeadline4TextBlock}"/>
                    <materialDesign:PackIcon Kind="Sync" Width="48" Height="48" VerticalAlignment="Center"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="10">
                    <TextBlock Text="2. Create tags with" VerticalAlignment="Center" Margin="0 0 5 0" Style="{StaticResource MaterialDesignHeadline4TextBlock}"/>
                    <materialDesign:PackIcon Kind="Add" Width="48" Height="48" VerticalAlignment="Center"/>
                </StackPanel>
                <TextBlock Text="3. Select a playlist" Margin="10" Style="{StaticResource MaterialDesignHeadline4TextBlock}"/>
                <TextBlock Text="4. Double click song to play" Margin="10" Style="{StaticResource MaterialDesignHeadline4TextBlock}"/>
                <TextBlock Text="5. Drag &amp; drop tags onto songs" Margin="10" Style="{StaticResource MaterialDesignHeadline4TextBlock}"/>
            </StackPanel>
            <!-- tracks -->
            <DataGrid 
                Grid.Column="1"
                ItemsSource="{Binding TrackVMs}" 
                SelectedItem="{Binding SelectedTrackVM}"
                Visibility="{Binding SelectedPlaylist, Converter={StaticResource NullableToVisibilityConverter}}"
                CanUserAddRows="False" AutoGenerateColumns="False"
                HeadersVisibility="All"
                AllowDrop="True"
                Drop="Tracks_Drop"
                SelectionMode="Single"
                CanUserReorderColumns="False"
                MouseDoubleClick="PlayTrack"
                RowHeaderWidth="0">
                <DataGrid.Resources>
                    <Style x:Key="VerticalCenteredTextColumn" TargetType="TextBlock" BasedOn="{StaticResource MaterialDesignDataGridTextColumnStyle}">
                        <Setter Property="VerticalAlignment" Value="Center" />
                    </Style>
                </DataGrid.Resources>
                <!-- remove outline of a selcted cell -->
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell" BasedOn="{StaticResource MaterialDesignDataGridCell}">
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                        <!-- green text if track is currently playing  -->
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsPlaying}" Value="True">
                                <Setter Property="Foreground" Value="#1ed760" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.CellStyle>
                <!-- select on mouseover -->
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow" BasedOn="{StaticResource MaterialDesignDataGridRow}">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="IsSelected" Value="True"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <DataGridTemplateColumn IsReadOnly="True" Width="Auto">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Image Height="21" Width="21" Source="{Binding PlayerManager.SpotifyLogoUrl}" RenderOptions.BitmapScalingMode="Fant"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn 
                        Binding="{Binding Track.Name}" 
                        Header="Name"
                        IsReadOnly="True"
                        ElementStyle="{StaticResource VerticalCenteredTextColumn}"
                        Width="2*"/>
                    <DataGridTextColumn 
                        Binding="{Binding Track.ArtistsString}" 
                        Header="Artists"
                        IsReadOnly="True"
                        ElementStyle="{StaticResource VerticalCenteredTextColumn}"
                        Width="*" />
                    <DataGridTextColumn 
                        Binding="{Binding Track.Album.ReleaseYear}" 
                        Header="Year"
                        IsReadOnly="True"
                        ElementStyle="{StaticResource VerticalCenteredTextColumn}"
                        Width="Auto" />

                    <DataGridTemplateColumn IsReadOnly="True" Header="Tags" Width="2*" SortMemberPath="Track.TagsString">
                        <DataGridTemplateColumn.CellTemplate>
                            <ItemContainerTemplate DataType="{x:Type backend:Tag}">
                                <ItemsControl ItemsSource="{Binding Track.Tags}" >
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel Orientation="Horizontal"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <materialDesign:Chip 
                                                Content="{Binding Name}"
                                                IsDeletable="True" 
                                                DeleteClick="AssignedTag_DeleteClick" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </ItemContainerTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                </DataGrid.Columns>
            </DataGrid>
            <ProgressBar 
                Grid.Column="1" 
                Visibility="{Binding IsLoadingTracks, Converter={StaticResource BooleanToVisibilityConverter}}"
                Style="{StaticResource MaterialDesignCircularProgressBar}"
                Value="0"
                IsIndeterminate="True" />

            <GridSplitter Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="1"/>
            
            <!-- tags -->
            <Grid Grid.Row="0" Grid.Column="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <!-- tag headers -->
                <StackPanel Grid.Row="0">
                    <Grid Margin="8 0 0 4">
                        <TextBlock
                        Name="TagsHeader"
                        Style="{StaticResource MaterialDesignHeadline5TextBlock}"
                        Text="Tags"/>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                            <!-- add button -->
                            <Button
                                ToolTip="Add"
                                Style="{DynamicResource MaterialDesignToolButton}"
                                Command="{x:Static materialDesign:DialogHost.OpenDialogCommand}"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                materialDesign:RippleAssist.Feedback="{Binding RelativeSource={RelativeSource Self}, Path=Foreground, Converter={StaticResource BrushRoundConverter}}"
                                materialDesign:RippleAssist.ClipToBounds="True">
                                <materialDesign:PackIcon
                                    Height="24"
                                    Width="24"
                                    Kind="Plus" />
                                <!-- add button dialog -->
                                <Button.CommandParameter>
                                    <Grid Margin="16">
                                        <Grid.RowDefinitions>
                                            <RowDefinition />
                                            <RowDefinition />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>
                                        <TextBlock>New tag:</TextBlock>
                                        <TextBox 
                                            materialDesign:HintAssist.Hint="Name" 
                                            Style="{DynamicResource DialogTextBox}"
                                            materialDesign:HintAssist.Foreground="{DynamicResource PrimaryHueLightBrush}"
                                            Margin="0 6 0 0"
                                            FontSize="18" Grid.Row="1"
                                            TextChanged="NewTagName_TextChanged">
                                            <TextBox.Text>
                                                <Binding Path="DataContext.NewTagName" ElementName="TagEditorUserControl" UpdateSourceTrigger="PropertyChanged">
                                                    <Binding.ValidationRules>
                                                        <validationRules:TagExistsValidationRule ValidatesOnTargetUpdated="True" ErrorText="Tag already exists"/>
                                                    </Binding.ValidationRules>
                                                </Binding>
                                            </TextBox.Text>
                                        </TextBox>
                                        <Grid Grid.Row="2" Margin="0 16 0 0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <Button Grid.Column="0" IsCancel="True" Style="{DynamicResource DialogButton}"
                                                Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                                                Content="CANCEL"
                                                Click="AddTagDialog_Cancel"/>
                                            <Button Grid.Column="1" IsDefault="True" Style="{DynamicResource DialogButton}"
                                                IsEnabled="{Binding DataContext.CanAddTag, ElementName=TagEditorUserControl, UpdateSourceTrigger=PropertyChanged}"
                                                Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                                                Content="ADD"
                                                Click="AddTagDialog_Add"/>
                                        </Grid>
                                    </Grid>
                                </Button.CommandParameter>
                            </Button>
                            <Button
                                ToolTip="Edit"
                                Style="{DynamicResource MaterialDesignToolButton}"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                materialDesign:RippleAssist.Feedback="{Binding RelativeSource={RelativeSource Self}, Path=Foreground, Converter={StaticResource BrushRoundConverter}}"
                                materialDesign:RippleAssist.ClipToBounds="True"
                                Click="ToggleEditMode">
                                <materialDesign:PackIcon
                                    Height="24"
                                    Width="24"
                                    Kind="{Binding TagEditIcon}" />
                            </Button>
                            <Button
                                ToolTip="Delete"
                                Style="{DynamicResource MaterialDesignToolButton}"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                                materialDesign:RippleAssist.Feedback="{Binding RelativeSource={RelativeSource Self}, Path=Foreground, Converter={StaticResource BrushRoundConverter}}"
                                materialDesign:RippleAssist.ClipToBounds="True"
                                Click="ToggleDeleteMode">
                                <materialDesign:PackIcon
                                    Height="24"
                                    Width="24"
                                    Kind="{Binding TagDeleteIcon}" />
                            </Button>
                        </StackPanel>
                    </Grid>
                    <Rectangle Height="1" Fill="{DynamicResource MaterialDesignDivider}"/>
                </StackPanel>
                <!-- tag chips -->
                <ItemsControl Grid.Row="1" ItemsSource="{Binding DataContainer.Tags}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <materialDesign:Chip
                                PreviewMouseDown="Tag_PreviewMouseDown"
                                VerticalAlignment="Center">
                                <!-- tag content -->
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center" Text="{Binding Name}"/>
                                    <Button Command="{x:Static materialDesign:DialogHost.OpenDialogCommand}"
                                        Visibility="{Binding DataContext.IsTagEditOrDeleteMode, ElementName=TagEditorUserControl, Converter={StaticResource BooleanToVisibilityConverter}}"
                                        Click="EditOrDeleteTagButton_Click">
                                        <!-- display button if edit/delete mode is selected -->
                                        <Button.Template>
                                            <ControlTemplate>
                                                <Grid Width="16" Height="16" Margin="6 0 -2 0">
                                                    <Ellipse x:Name="Bg" Fill="#FFA6A6A6" Stroke="#FF009587" StrokeThickness="0" MouseEnter="TagEditOrDelete_MouseEnter" MouseLeave="TagEditOrDelete_MouseLeave"/>
                                                    <materialDesign:PackIcon 
                                                        Kind="{Binding DataContext.TagDeleteOrEditIcon, ElementName=TagEditorUserControl}"  
                                                        Width="12" Height="12"
                                                        HorizontalAlignment="Center"
                                                        VerticalAlignment="Center"
                                                        MouseEnter="TagEditOrDelete_MouseEnter"
                                                        MouseLeave="TagEditOrDelete_MouseLeave"/>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="Bg" Property="StrokeThickness" Value="1" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Button.Template>
                                        <!-- edit/delete dialogs -->
                                        <Button.CommandParameter>
                                            <ContentControl Content="{Binding DataContext.IsTagEditMode, Source={x:Reference TagEditorUserControl}}">
                                                <!-- dialog templates -->
                                                <ContentControl.Resources>
                                                    <!-- delete dialog -->
                                                    <DataTemplate x:Key="DeleteTagDialog">
                                                        <Grid Margin="16">
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition />
                                                                <RowDefinition />
                                                            </Grid.RowDefinitions>
                                                            <StackPanel Grid.Row="0">
                                                                <TextBlock Margin="0 6 0 0" FontSize="18" Style="{DynamicResource MaterialDesignTextBlock}">Really delete tag?</TextBlock>
                                                                <TextBlock Style="{DynamicResource MaterialDesignTextBlock}"
                                                                Margin="0 6 0 0"
                                                                FontSize="18" 
                                                                FontWeight="Bold"
                                                                Text="{Binding DataContext.ClickedTag.Name, ElementName=TagEditorUserControl}"/>
                                                            </StackPanel>
                                                            <Grid Grid.Row="1" Margin="0 16 0 0">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="*"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                </Grid.ColumnDefinitions>
                                                                <Button Grid.Column="0" IsCancel="True" Style="{DynamicResource DialogButton}"
                                                                    Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                                                                    Content="CANCEL"
                                                                    Click="DeleteTagDialog_Cancel"/>
                                                                <Button Grid.Column="1" IsDefault="True" Style="{DynamicResource DialogButton}"
                                                            Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                                                            Content="DELETE"
                                                            Click="DeleteTagDialog_Delete"/>
                                                            </Grid>
                                                        </Grid>
                                                    </DataTemplate>
                                                    <!-- edit dialog -->
                                                    <DataTemplate x:Key="EditTagDialog">
                                                        <Grid Margin="16">
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition />
                                                                <RowDefinition />
                                                                <RowDefinition />
                                                            </Grid.RowDefinitions>
                                                            <TextBlock Margin="0 6 0 0" FontSize="18" Style="{DynamicResource MaterialDesignTextBlock}">Edit tag:</TextBlock>
                                                            <TextBox 
                                                                materialDesign:HintAssist.Hint="Name" 
                                                                Style="{DynamicResource DialogTextBox}"
                                                                materialDesign:HintAssist.Foreground="{DynamicResource PrimaryHueLightBrush}"
                                                                Margin="0 6 0 0"
                                                                FontSize="18" Grid.Row="1"
                                                                TextChanged="NewTagName_TextChanged">
                                                                <TextBox.Text>
                                                                    <Binding Path="DataContext.NewTagName" ElementName="TagEditorUserControl" UpdateSourceTrigger="PropertyChanged">
                                                                        <Binding.ValidationRules>
                                                                            <validationRules:TagExistsValidationRule ValidatesOnTargetUpdated="True" ErrorText="Tag already exists"/>
                                                                        </Binding.ValidationRules>
                                                                    </Binding>
                                                                </TextBox.Text>
                                                            </TextBox>
                                                            <Grid Grid.Row="2" Margin="0 16 0 0">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="*"/>
                                                                    <ColumnDefinition Width="*"/>
                                                                </Grid.ColumnDefinitions>
                                                                <Button Grid.Column="0" IsCancel="True" Style="{DynamicResource DialogButton}"
                                                                    Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                                                                    Content="CANCEL"
                                                                    Click="EditTagDialog_Cancel"/>
                                                                <Button Grid.Column="1" IsDefault="True" Style="{DynamicResource DialogButton}"
                                                                    Command="{x:Static materialDesign:DialogHost.CloseDialogCommand}"
                                                                    IsEnabled="{Binding DataContext.CanEditTag, ElementName=TagEditorUserControl}"
                                                                    Content="SAVE"
                                                                    Click="EditTagDialog_Save"/>
                                                            </Grid>
                                                        </Grid>
                                                    </DataTemplate>
                                                </ContentControl.Resources>
                                                <!-- dialog template selection -->
                                                <ContentControl.Style>
                                                    <Style TargetType="{x:Type ContentControl}">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding DataContext.IsTagDeleteMode, Source={x:Reference TagEditorUserControl}}" Value="true">
                                                                <Setter Property="ContentTemplate" Value="{StaticResource DeleteTagDialog}" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding DataContext.IsTagEditMode, Source={x:Reference TagEditorUserControl}}" Value="true">
                                                                <Setter Property="ContentTemplate" Value="{StaticResource EditTagDialog}" />
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ContentControl.Style>
                                            </ContentControl>
                                        </Button.CommandParameter>
                                    </Button>
                                </StackPanel>
                            </materialDesign:Chip>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
                <!-- load tags progress -->
                <ProgressBar 
                    Grid.Row="1"
                    Visibility="{Binding DataContainer.Tags, Converter={StaticResource InverseNullableToVisibilityConverter}}"
                    Style="{StaticResource MaterialDesignCircularProgressBar}"
                    Value="0"
                    IsIndeterminate="True" />
            </Grid>


            <Rectangle
                Visibility="{Binding Settings.HidePlayer, Converter={StaticResource InverseBoolToVisConverter}}"
                Grid.Row="2"
                Grid.ColumnSpan="3"
                Height="1"
                VerticalAlignment="Top"
                Fill="{DynamicResource MaterialDesignDivider}"/>
            
            <!-- Song info -->
            <Grid 
                Visibility="{Binding Settings.HidePlayer, Converter={StaticResource InverseBoolToVisConverter}}"
                Grid.Row="1" Grid.Column="0" 
                Background="{DynamicResource MaterialDesignCardBackground}" 
                VerticalAlignment="Stretch">
                <Grid Margin="8">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Image Height="80" Width="80" Source="{Binding PlayerManager.AlbumUrl}" RenderOptions.BitmapScalingMode="Fant"/>
                    <StackPanel Grid.Column="1" Margin="10 3 0 0" VerticalAlignment="Center">
                        <Image Height="21" Width="21" Margin="0 0 0 10" 
                               Source="{Binding PlayerManager.SpotifyLogoUrl}" 
                               Visibility="{Binding PlayerManager.HasAlbumUrl, Converter={StaticResource BooleanToVisibilityConverter}}"
                               RenderOptions.BitmapScalingMode="Fant" HorizontalAlignment="Left"/>
                        <TextBlock Text="{Binding PlayerManager.TrackName}" FontWeight="Bold" FontSize="18"/>
                        <TextBlock Text="{Binding PlayerManager.ArtistsString}" FontSize="14"/>
                    </StackPanel>
                </Grid>
            </Grid>
            <!-- controls and song progress -->
            <Grid
                Visibility="{Binding Settings.HidePlayer, Converter={StaticResource InverseBoolToVisConverter}}"
                Grid.Row="1" Grid.Column="1" 
                Background="{DynamicResource MaterialDesignCardBackground}">
                <StackPanel VerticalAlignment="Center">
                    <!-- play/pause control -->
                    <Grid VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0 0 0 0">
                        <Button
                            Padding="0"
                            VerticalAlignment="Center"
                            ToolTip="{Binding PlayerManager.IsPremiumUser, Converter={StaticResource IsPremiumPlayToolTipConverter}}"
                            ToolTipService.ShowOnDisabled="True"
                            Style="{DynamicResource MaterialDesignToolButton}"
                            Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                            Click="Play_Click"
                            Visibility="{Binding PlayerManager.IsPlaying, Converter={StaticResource InverseBoolToVisConverter}}"
                            IsEnabled="{Binding PlayerManager.IsPremiumUser}"
                            Height="{StaticResource SpotifyPlayPauseSize}"
                            materialDesign:RippleAssist.IsDisabled="True">
                            <materialDesign:PackIcon 
                                Kind="PlayCircle" 
                                Height="{StaticResource SpotifyPlayPauseSize}" Width="{StaticResource SpotifyPlayPauseSize}"/>
                        </Button>
                        <Button
                            Padding="0"
                            VerticalAlignment="Center"
                            ToolTip="{Binding PlayerManager.IsPremiumUser, Converter={StaticResource IsPremiumPauseToolTipConverter}}"
                            ToolTipService.ShowOnDisabled="True"
                            Style="{DynamicResource MaterialDesignToolButton}"
                            Foreground="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"
                            Click="Pause_Click"
                            Visibility="{Binding PlayerManager.IsPlaying, Converter={StaticResource BooleanToVisibilityConverter}}"
                            IsEnabled="{Binding PlayerManager.IsPremiumUser}"
                            Height="{StaticResource SpotifyPlayPauseSize}"
                            materialDesign:RippleAssist.IsDisabled="True">
                            <materialDesign:PackIcon 
                                Kind="PauseCircle" 
                                Height="{StaticResource SpotifyPlayPauseSize}" Width="{StaticResource SpotifyPlayPauseSize}"/>
                        </Button>
                    </Grid>
                    <!-- progress -->
                    <Grid VerticalAlignment="Center">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="2*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock 
                            Grid.Column="0" 
                            Text="{Binding Progress, Converter={StaticResource MsToMinConverter}}" 
                            Margin="0 0 6 0" 
                            TextAlignment="Right" 
                            VerticalAlignment="Center"/>
                        <Slider 
                            Grid.Column="1" 
                            Value="{Binding Progress}" 
                            Minimum="0" Maximum="{Binding PlayerManager.ProgressMax}" TickFrequency="10"
                            Thumb.DragStarted="DisableProgressUpdates"
                            Thumb.DragCompleted="SetProgress_DragCompleted"
                            ValueChanged="SetProgress_ValueChanged"
                            ToolTip="{Binding PlayerManager.IsPremiumUser, Converter={StaticResource IsPremiumEmptyToolTipConverter}}"
                            ToolTipService.ShowOnDisabled="True"
                            IsEnabled="{Binding PlayerManager.IsPremiumUser}"/>
                        <TextBlock 
                            Grid.Column="2" 
                            Text="{Binding PlayerManager.ProgressMax, Converter={StaticResource MsToMinConverter}}" 
                            Margin="6 0 0 0" 
                            VerticalAlignment="Center" />
                    </Grid>
                </StackPanel>
            </Grid>
            <!-- volume control -->
            <Grid
                Visibility="{Binding Settings.HidePlayer, Converter={StaticResource InverseBoolToVisConverter}}"
                Grid.Row="1" Grid.Column="2"
                Background="{DynamicResource MaterialDesignCardBackground}">
                <Grid Margin="8 0 24 0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <materialDesign:PackIcon 
                        Grid.Column="0"
                        Margin="8"
                        Kind="{Binding Value, ElementName=VolumeSlider, Converter={StaticResource VolumeToIconKindConverter}}" 
                        VerticalAlignment="Center"
                        Height="{StaticResource SpotifyControlSize}" Width="{StaticResource SpotifyControlSize}"/>
                    <Slider 
                        Grid.Column="1" 
                        Value="{Binding PlayerManager.Volume}" 
                        Name="VolumeSlider" 
                        Minimum="0" Maximum="100" TickFrequency="1"
                        VerticalAlignment="Center"
                        Thumb.DragStarted="DisableVolumeUpdates"
                        Thumb.DragCompleted="SetVolume_DragCompleted"
                        ValueChanged="SetVolume_ValueChanged"
                        ToolTip="{Binding PlayerManager.IsPremiumUser, Converter={StaticResource IsPremiumEmptyToolTipConverter}}"
                        ToolTipService.ShowOnDisabled="True"
                        IsEnabled="{Binding PlayerManager.IsPremiumUser}"/>
                    <TextBlock 
                        Grid.Column="2" 
                        Text="{Binding Value, ElementName=VolumeSlider, Converter={StaticResource VolumeToTextConverter}}" 
                        VerticalAlignment="Center"
                        Margin="10 0 0 0"/>
                </Grid>
            </Grid>
        </Grid>
    </materialDesign:DialogHost>
</UserControl>
